{"version":3,"file":"stories-Button-stories.aac82661672082dc7c0d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAGA;AAzKA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://toonba-react-date-picker-library/./src/components/Calendar/Calendar.jsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { useEffect } from 'react'\nimport styled, { css, keyframes } from 'styled-components'\n\n// Animation\nconst slideInRight = keyframes`\n  0% { transform: translateX(50%) }\n  100% { transform: translateX(0) }\n`\nconst slideInLeft = keyframes`\n  0% { transform: translateX(-50%) }\n  100% { transform: translateX(0) }\n`\n//Calendat styles\nconst CalendarWrapper = styled.div`\n  border: 1px solid ${(props) => props.customStyle.primaryColor};\n  border-radius: ${(props) => props.customStyle.borderRadius};\n  width: ${(props) => props.customStyle.calendarWidth};\n  margin: 10px auto;\n  overflow: hidden;\n  background-color: ${(props) => props.customStyle.backgroundColor};\n  box-shadow: 5px 5px 4px rgba(0, 0, 0, 0.5);\n  position: absolute;\n  top: 80px;\n`\nconst Header = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 10px;\n\n  p {\n    width: 90%;\n    flex: 1 0 0;\n    text-align: center;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    color: ${(props) => props.customStyle.textColor};\n\n    select {\n      margin: 0 10px;\n      background-color: ${(props) => props.customStyle.backgroundColor};\n      border-radius: ${(props) => props.customStyle.borderRadius};\n      padding: 2px 5px;\n      border: 1px solid ${(props) => props.customStyle.primaryColor};\n      outline: ${(props) => props.customStyle.primaryColor};\n      font-size: 1.1em;\n      font-weight: bold;\n      color: ${(props) => props.customStyle.textColor};\n    }\n  }\n\n  i {\n    cursor: pointer;\n    font-size: 1.3rem;\n    color: ${(props) => props.customStyle.primaryColor};\n  }\n\n  i:hover {\n    color: ${(props) => props.customStyle.primaryColorHover};\n  }\n\n  .fa-calendar-day {\n    font-size: 1.1em;\n    margin: 0;\n    width: 50%;\n    font-weight: bold;\n    color: ${(props) => props.customStyle.textColor};\n    opacity: 0.7;\n  }\n  .fa-calendar-day:hover {\n    color: ${(props) => props.customStyle.primaryColorHover};\n    opacity: 1;\n  }\n\n  .disabled {\n    color: lightgrey;\n    opacity: 0.3;\n  }\n`\nconst Body = styled.div`\n  margin: 5px auto;\n  width: 87%;\n  color: ${(props) => props.customStyle.textColor};\n`\nconst SevenColGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  text-align: center;\n  color: ${(props) => props.customStyle.textColor};\n\n  ${({ heading }) =>\n    heading &&\n    css`\n      font-weight: bold;\n      border-radius: 7px;\n      background-color: ${(props) => props.customStyle.primaryColor};\n      p {\n        margin: 0em;\n        padding: 0.7em;\n      }\n    `};\n\n  .sunday {\n    color: red;\n  }\n\n  .day {\n    cursor: pointer;\n    opacity: 0.7;\n    margin: 0em;\n    padding: 1em;\n    font-weight: bold;\n  }\n\n  .today,\n  .selected,\n  .day:hover {\n    font-weight: bold;\n    opacity: 1;\n    margin: 0.7em;\n    padding: 0.3em;\n    border-radius: 7px;\n  }\n\n  .not-a-day:hover {\n    opacity: 0;\n    cursor: initial;\n  }\n\n  .today {\n    background-color: ${(props) => props.customStyle.secondaryColor};\n  }\n\n  .selected,\n  .day:hover {\n    background-color: ${(props) => props.customStyle.primaryColor};\n  }\n\n  ${({ isAnimating }) =>\n    isAnimating &&\n    css`\n      animation: ${({ direction }) => (direction === 'right' ? slideInRight : slideInLeft)} 0.3s ease-in-out;\n    `}\n`\nconst ButtonContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  column-gap: 30px;\n  margin: 10px 0 20px 0;\n\n  button {\n    border: none;\n    padding: 1em 2em;\n    font-size: 1em;\n    font-weight: bold;\n    border-radius: ${(props) => props.customStyle.borderRadius};\n    cursor: pointer;\n  }\n\n  .confirm {\n    background-color: ${(props) => props.customStyle.primaryColor};\n  }\n\n  .confirm:hover {\n    background-color: ${(props) => props.customStyle.primaryColorHover};\n  }\n\n  .cancel {\n    background-color: ${(props) => props.customStyle.secondaryColor};\n  }\n  .cancel:hover {\n    background-color: ${(props) => props.customStyle.secondaryColorHover};\n  }\n`\n\n/**\n *\n * @param {Date} maxDate maximum date it will be possible to reach with datePicker, you can change it in config.js\n * @param {Date} minDate minimum date it will be possible to reach with datePicker, you can change it in config.js\n * @param {Object} style regroup few parameter that can be easily changed to adjust component, you can change it in config.js\n * @param {function} onClose function allowing to close calendar and get selected value in parent component\n * @returns {Component} Calendar used in datepicker\n */\n\nexport function Calendar({ maxDate, minDate, onSelection, customStyle, onClose, onCancel, isSelected }) {\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth())\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear())\n  const [isAnimating, setIsAnimating] = useState(false)\n  const [direction, setDirection] = useState('')\n  const [selectedDate, setSelectedDate] = useState(isSelected)\n  const yearRange = []\n  const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n  const dayNames = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n\n  //function handling how the calandar should look to get the 1 day of month correpsonding to the actual first day\n  const getNumberOfDaysInMonth = (year, month) => {\n    return new Date(year, month + 1, 0).getDate()\n  }\n\n  const range = (start, end) => {\n    const length = Math.abs((end - start) / 1)\n    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay()\n    const daysInWeek = dayNames.length\n    const startOffset = (firstDayOfMonth - 1 + daysInWeek) % daysInWeek\n\n    const offsetArray = Array.from({ length: startOffset }).fill('')\n    const numberArray = Array.from({ length }).map((_, index) => start + index)\n\n    return [...offsetArray, ...numberArray]\n  }\n\n  // function handling animation of calendar when month or year is changing\n  const handleSlide = (direction) => {\n    if (!isAnimating) {\n      setIsAnimating(true)\n      setDirection(direction)\n\n      setTimeout(() => {\n        setIsAnimating(false)\n      }, 300)\n    }\n  }\n\n  const handleChangeYear = (event) => {\n    if (parseInt(currentYear) > parseInt(event.target.value)) {\n      handleSlide('left')\n    } else if (parseInt(currentYear) < parseInt(event.target.value)) {\n      handleSlide('right')\n    }\n    setCurrentYear(parseInt(event.target.value))\n  }\n  const handleChangeMonth = (event) => {\n    if (parseInt(currentMonth) > parseInt(event.target.value)) {\n      handleSlide('left')\n    } else if (parseInt(currentMonth) < parseInt(event.target.value)) {\n      handleSlide('right')\n    }\n    setCurrentMonth(parseInt(event.target.value))\n  }\n\n  for (let i = minDate.getFullYear(); i <= maxDate.getFullYear(); i++) {\n    yearRange.push(i)\n  }\n\n  const beforeMinDate = minDate.getTime() > new Date(currentYear, currentMonth, minDate.getDate() - 1).getTime()\n  const afterMaxDate = maxDate.getTime() < new Date(currentYear, currentMonth, maxDate.getDate() + 1).getTime()\n\n  //Function handling an action made by user\n  const nextMonth = () => {\n    handleSlide('right')\n    if (parseInt(currentMonth) < 11) {\n      setCurrentMonth((prev) => prev + 1)\n    } else {\n      setCurrentMonth(0)\n      setCurrentYear((prev) => prev + 1)\n    }\n  }\n\n  const previousMonth = () => {\n    handleSlide('left')\n    if (currentMonth > 0) {\n      setCurrentMonth((prev) => prev - 1)\n    } else {\n      setCurrentMonth(11)\n      setCurrentYear((prev) => prev - 1)\n    }\n  }\n\n  const backToday = () => {\n    if (new Date(currentYear, currentMonth, 1).getFullYear() > new Date().getFullYear()) {\n      handleSlide('left')\n    } else if (new Date(currentYear, currentMonth, 1).getFullYear() === new Date().getFullYear()) {\n      if (new Date(currentYear, currentMonth, 1).getMonth() > new Date().getMonth()) {\n        handleSlide('left')\n      } else if (new Date(currentYear, currentMonth, 1).getMonth() === new Date().getMonth()) {\n      } else {\n        handleSlide('right')\n      }\n    } else {\n      handleSlide('right')\n    }\n    setCurrentMonth(new Date().getMonth())\n    setCurrentYear(new Date().getFullYear())\n  }\n\n  const handleSelection = (event) => {\n    if (event.target.classList.contains('day') && !event.target.classList.contains('not-a-day')) {\n      const selectedDay = parseInt(event.target.getAttribute('data-day'))\n      const dateSelected = new Date(currentYear, currentMonth, selectedDay)\n      setSelectedDate(dateSelected)\n      onSelection(dateSelected)\n    }\n  }\n\n  useEffect(() => {\n    if (selectedDate instanceof Date) {\n      setCurrentYear(selectedDate.getFullYear())\n      setCurrentMonth(selectedDate.getMonth())\n    }\n  }, [selectedDate])\n\n  return (\n    <CalendarWrapper customStyle={customStyle}>\n      <Header customStyle={customStyle}>\n        {beforeMinDate ? <i className=\"fa-solid fa-chevron-left disabled\"></i> : <i className=\"fa-solid fa-chevron-left\" onClick={previousMonth}></i>}\n        <p>\n          <i className=\"fa-solid fa-calendar-day\" onClick={backToday}></i>\n          <select name=\"month\" value={currentMonth} onChange={handleChangeMonth}>\n            {monthNames.map((monthName, index) => (\n              <option value={index} key={`${index}-${monthName}`}>\n                {monthName}\n              </option>\n            ))}\n          </select>\n          <select name=\"year\" value={currentYear} onChange={handleChangeYear}>\n            {yearRange.map((year, index) => (\n              <option value={year} key={`${index}-${year}`}>\n                {year}\n              </option>\n            ))}\n          </select>\n        </p>\n        {afterMaxDate ? <i className=\"fa-solid fa-chevron-right disabled\"></i> : <i className=\"fa-solid fa-chevron-right\" onClick={nextMonth}></i>}\n      </Header>\n      <Body customStyle={customStyle}>\n        <SevenColGrid heading customStyle={customStyle}>\n          {dayNames.map((day, index) => (\n            <p key={`${index}-${day}`} className={day === 'Sun' ? 'sunday' : ' '}>\n              {day}\n            </p>\n          ))}\n        </SevenColGrid>\n        <SevenColGrid onClick={handleSelection} customStyle={customStyle} isAnimating={isAnimating} direction={direction}>\n          {range(1, getNumberOfDaysInMonth(currentYear, currentMonth) + 1).map((day, index) => (\n            <p\n              key={`${day}-${index}`}\n              className={`day ${currentYear === new Date().getFullYear() ? (currentMonth === new Date().getMonth() ? (day === new Date().getDate() ? 'today' : ' ') : ' ') : ' '} ${new Date(currentYear, currentMonth, day).getDay() === 0 ? 'sunday' : ' '} ${selectedDate === '' ? '' : currentYear === selectedDate.getFullYear() ? (currentMonth === selectedDate.getMonth() ? (day === selectedDate.getDate() ? 'selected' : ' ') : ' ') : ' '} ${day === '' ? 'not-a-day' : ''}`}\n              data-day={day}>\n              {day}\n            </p>\n          ))}\n        </SevenColGrid>\n      </Body>\n      <ButtonContainer customStyle={customStyle}>\n        <button className=\"cancel\" onClick={onCancel}>\n          Cancel\n        </button>\n        <button className=\"confirm\" onClick={onClose}>\n          Confirm\n        </button>\n      </ButtonContainer>\n    </CalendarWrapper>\n  )\n}\n"],"names":[],"sourceRoot":""}