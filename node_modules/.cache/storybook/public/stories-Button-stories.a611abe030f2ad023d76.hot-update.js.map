{"version":3,"file":"stories-Button-stories.a611abe030f2ad023d76.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://toonba-react-date-picker-library/./src/components/DatePicker/DatePicker.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\nimport Calendar from '../Calendar/calendar'\n\nimport styled, { css, keyframes } from 'styled-components'\n\n// DatePicker Style\n\nexport const PickerWrapper = styled.div`\n  margin: 50px auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const DatePickerInput = styled.input`\n  width: ${(props) => props.customStyle.inputWidth};\n  padding: 5px;\n  background-color: ${(props) => props.customStyle.inputBackground};\n  text-align: center;\n  position: relative;\n  border: 1px solid black;\n  border-radius: 5px;\n  margin: 0px auto;\n  color: ${(props) => props.customStyle.textColor};\n  position: relative;\n\n  :focus {\n    outline: solid 1px ${(props) => props.customStyle.primaryColor};\n    border: solid 1px ${(props) => props.customStyle.primaryColor};\n  }\n\n  .hide {\n    display: none;\n  }\n`\n\n/**\n *\n * @param {Date} maxDate maximum date it will be possible to reach with datePicker, you can change it in config.js\n * @param {Date} minDate minimum date it will be possible to reach with datePicker, you can change it in config.js\n * @param {Object} style regroup few parameter that can be easily changed to adjust component, you can change it in config.js\n * @param {function} getData callback function to pass to the component to be able to access the selected. /!\\argument of this function will be an object Date s\n * @returns {Component} datePicker\n */\n\nexport function DatePicker({ maxDate, minDate, customStyle, getData }) {\n  //Check to ensure user didn't made mistake with min and max Date\n  if (minDate > maxDate) {\n    alert('ProblÃ¨me minDate > maxDate')\n  }\n\n  const [isOpen, setIsOpen] = useState(false)\n  const [inputValue, setInputValue] = useState('')\n  const [selectedDate, setSelectedDate] = useState('')\n  const datePickerContainerRef = useRef(null)\n\n  // function handling when calendar should be hidden\n  const openClose = () => {\n    setIsOpen(!isOpen)\n  }\n\n  const handleClickOutside = (e) => {\n    if (datePickerContainerRef.current && !datePickerContainerRef.current.contains(e.target)) {\n      setIsOpen(false)\n    }\n  }\n\n  const handleDateSelection = (selectedValue) => {\n    setInputValue(selectedValue.toLocaleDateString())\n    setSelectedDate(selectedValue)\n    getData(selectedValue)\n  }\n\n  const handleCloseCalendar = () => {\n    if (inputValue === '') {\n      alert('please select a date')\n    } else {\n      setIsOpen(false)\n      console.log(selectedDate)\n    }\n  }\n\n  const handleCancelButton = () => {\n    setInputValue('')\n    setSelectedDate('')\n    setIsOpen(false)\n  }\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value)\n  }\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside)\n    return () => {\n      document.removeEventListener('click', handleClickOutside)\n    }\n  }, [])\n\n  return (\n    <>\n      <PickerWrapper ref={datePickerContainerRef} className=\"datePicker-container\" customStyle={customStyle}>\n        <DatePickerInput type=\"text\" onClick={openClose} onChange={handleChange} value={inputValue} customStyle={customStyle}></DatePickerInput>\n        {isOpen === true ? <Calendar maxDate={maxDate} minDate={minDate} onSelection={handleDateSelection} onClose={handleCloseCalendar} onCancel={handleCancelButton} customStyle={customStyle} isSelected={selectedDate} /> : null}\n      </PickerWrapper>\n    </>\n  )\n}\n\n"],"names":[],"sourceRoot":""}